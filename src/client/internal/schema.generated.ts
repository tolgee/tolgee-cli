/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v2/user': {
    /** Returns current user's data. */
    get: operations['getInfo'];
    /** Updates current user's data. */
    put: operations['updateUser'];
    /**
     * Updates current user's data.
     * @deprecated
     */
    post: operations['updateUserOld'];
    /** Deletes current user. */
    delete: operations['delete'];
  };
  '/v2/user/password': {
    /** Updates current user's password. Invalidates all previous sessions upon success. */
    put: operations['updateUserPassword'];
  };
  '/v2/user/mfa/totp': {
    /** Enables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
    put: operations['enableMfa'];
    /** Disables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
    delete: operations['disableMfa'];
  };
  '/v2/user/mfa/recovery': {
    /** Regenerates multi-factor authentication recovery codes */
    put: operations['regenerateRecoveryCodes'];
  };
  '/v2/user/avatar': {
    /** Uploads user's avatar. */
    put: operations['uploadAvatar'];
    /** Deletes user's avatar. */
    delete: operations['removeAvatar'];
  };
  '/v2/user-preferences/set-preferred-organization/{organizationId}': {
    /** Set user preferred organization */
    put: operations['setPreferredOrganization'];
  };
  '/v2/user-preferences/set-language/{languageTag}': {
    /** Set user's UI language */
    put: operations['setLanguage'];
  };
  '/v2/projects/{projectId}': {
    /** Returns project by id */
    get: operations['get_2'];
    /** Modifies project */
    put: operations['editProject'];
    /** Deletes project by id */
    delete: operations['deleteProject'];
  };
  '/v2/projects/{projectId}/users/{userId}/set-permissions/{permissionType}': {
    /** Sets user's direct permission */
    put: operations['setUsersPermissions'];
  };
  '/v2/projects/{projectId}/users/{userId}/revoke-access': {
    /** Revokes user's access */
    put: operations['revokePermission'];
  };
  '/v2/projects/{projectId}/namespaces/{id}': {
    /** Update namespace */
    put: operations['update'];
  };
  '/v2/projects/{projectId}/machine-translation-service-settings': {
    /** Returns machine translation settings for project */
    get: operations['getMachineTranslationSettings'];
    /** Sets machine translation settings for project */
    put: operations['setMachineTranslationSettings'];
  };
  '/v2/projects/{projectId}/keys/{keyId}/tags': {
    /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
    put: operations['tagKey'];
  };
  '/v2/projects/{projectId}/keys/{id}/complex-update': {
    /** More */
    put: operations['complexEdit'];
  };
  '/v2/projects/{projectId}/keys/{id}': {
    /** Edits key name */
    put: operations['edit'];
  };
  '/v2/projects/{projectId}/invite': {
    /** Generates user invitation link for project */
    put: operations['inviteUser'];
  };
  '/v2/projects/{projectId}/auto-translation-settings': {
    /** Returns auto translation settings for project */
    get: operations['getAutoTranslationSettings'];
    /** Sets auto translation settings for project */
    put: operations['setAutoTranslationSettings'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-override': {
    /**
     * Resolve conflict (override)
     * @description Resolves translation conflict. The old translation will be overridden.
     */
    put: operations['resolveTranslationSetOverride'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-keep-existing': {
    /**
     * Resolve conflict (keep existing)
     * @description Resolves translation conflict. The old translation will be kept.
     */
    put: operations['resolveTranslationSetKeepExisting'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-override': {
    /**
     * Resolve all translation conflicts (override)
     * @description Resolves all translation conflicts for provided language. The old translations will be overridden.
     */
    put: operations['resolveTranslationSetOverride_2'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-keep-existing': {
    /**
     * Resolve all translation conflicts (keep existing)
     * @description Resolves all translation conflicts for provided language. The old translations will be kept.
     */
    put: operations['resolveTranslationSetKeepExisting_2'];
  };
  '/v2/projects/{projectId}/import/result/languages/{importLanguageId}/select-existing/{existingLanguageId}': {
    /**
     * Pair existing language
     * @description Sets existing language to pair with language to import. Data will be imported to selected existing language when applied.
     */
    put: operations['selectExistingLanguage'];
  };
  '/v2/projects/{projectId}/import/result/languages/{importLanguageId}/reset-existing': {
    /**
     * Reset existing language pairing
     * @description Resets existing language paired with language to import.
     */
    put: operations['resetExistingLanguage'];
  };
  '/v2/projects/{projectId}/import/result/files/{fileId}/select-namespace': {
    /**
     * Select namespace
     * @description Sets namespace for file to import.
     */
    put: operations['selectNamespace'];
  };
  '/v2/projects/{projectId}/import/apply': {
    /**
     * Apply
     * @description Imports the data prepared in previous step
     */
    put: operations['applyImport'];
  };
  '/v2/projects/{projectId}/translations/{translationId}/set-state/{state}': {
    /** Sets translation state */
    put: operations['setTranslationState'];
  };
  '/v2/projects/{projectId}/translations/{translationId}/comments/{commentId}/set-state/{state}': {
    /** Sets state of translation comment */
    put: operations['setState'];
  };
  '/v2/projects/{projectId}/translations/{translationId}/comments/{commentId}': {
    /** Returns single translation comment */
    get: operations['get_3'];
    /** Updates single translation comment */
    put: operations['update_1'];
    /** Deletes the translation comment */
    delete: operations['delete_5'];
  };
  '/v2/projects/{projectId}/translations/{translationId}/dismiss-auto-translated-state': {
    /** Removes "auto translated" indication */
    put: operations['dismissAutoTranslatedState'];
  };
  '/v2/projects/{projectId}/translations': {
    /** Returns translations in project */
    get: operations['getTranslations'];
    /** Sets translations for existing key */
    put: operations['setTranslations'];
    /** Sets translations for existing or not existing key */
    post: operations['createOrUpdateTranslations'];
  };
  '/v2/projects/{projectId}/transfer-to-organization/{organizationId}': {
    /** Transfers project's ownership to organization */
    put: operations['transferProjectToOrganization'];
  };
  '/v2/projects/{projectId}/leave': {
    /** Leave project */
    put: operations['leaveProject'];
  };
  '/v2/projects/{projectId}/languages/{languageId}': {
    /** Returns specific language */
    get: operations['get_5'];
    /** Edits language */
    put: operations['editLanguage'];
    /** Deletes specific language */
    delete: operations['deleteLanguage_2'];
  };
  '/v2/projects/{projectId}/keys/{keyId}/auto-translate': {
    /**
     * Auto translates keys
     * @description Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     *
     * This will replace the the existing translation with the result obtained from specified source!
     */
    put: operations['autoTranslate'];
  };
  '/v2/projects/{projectId}/avatar': {
    /** Uploads organizations avatar */
    put: operations['uploadAvatar_1'];
    /** Deletes organization avatar */
    delete: operations['removeAvatar_1'];
  };
  '/v2/pats/{id}': {
    /** Get Personal Access Token */
    get: operations['get_7'];
    /** Updates Personal Access Token */
    put: operations['update_3'];
    /** Deletes Personal Access Token */
    delete: operations['delete_7'];
  };
  '/v2/pats/{id}/regenerate': {
    /** Regenerates Personal Access Token. It generates new token value and updates its time of expiration. */
    put: operations['regenerate'];
  };
  '/v2/organizations/{organizationId}/users/{userId}/set-role': {
    /** Sets user role (Owner or Member) */
    put: operations['setUserRole'];
  };
  '/v2/organizations/{id}': {
    /** Returns organization by ID */
    get: operations['get_9'];
    /** Updates organization data */
    put: operations['update_4'];
    /** Deletes organization and all its projects */
    delete: operations['delete_8'];
  };
  '/v2/organizations/{id}/leave': {
    /** Removes current user from organization */
    put: operations['leaveOrganization'];
  };
  '/v2/organizations/{id}/invite': {
    /** Generates user invitation link for organization */
    put: operations['inviteUser_1'];
  };
  '/v2/organizations/{id}/avatar': {
    /** Uploads organizations avatar */
    put: operations['uploadAvatar_2'];
    /** Deletes organization avatar */
    delete: operations['removeAvatar_2'];
  };
  '/v2/api-keys/{apiKeyId}': {
    /** Edits existing API key */
    put: operations['update_5'];
    /** Deletes API key */
    delete: operations['delete_10'];
  };
  '/v2/api-keys/{apiKeyId}/regenerate': {
    /** Regenerates API key. It generates new API key value and updates its time of expiration. */
    put: operations['regenerate_1'];
  };
  '/v2/administration/users/{userId}/set-role/{role}': {
    put: operations['setRole'];
  };
  '/v2/user/generate-super-token': {
    /** Generates new JWT token permitted to sensitive operations */
    post: operations['getSuperToken'];
  };
  '/v2/slug/generate-project': {
    /** Generate project address part */
    post: operations['generateProjectSlug'];
  };
  '/v2/slug/generate-organization': {
    /** Generate organization address part */
    post: operations['generateOrganizationSlug'];
  };
  '/v2/projects': {
    /** Returns all projects where current user has any permission */
    get: operations['getAll'];
    /** Creates project with specified languages */
    post: operations['createProject'];
  };
  '/v2/projects/{projectId}/keys/import': {
    /** Import's new keys with translations. If key already exists, it's translations are not updated. */
    post: operations['importKeys'];
  };
  '/v2/projects/{projectId}/keys/create': {
    /** Creates new key */
    post: operations['create'];
  };
  '/v2/projects/{projectId}/keys': {
    /** Creates new key */
    post: operations['create_1'];
    /** Deletes one or multiple keys by their IDs in request body */
    delete: operations['delete_3'];
  };
  '/v2/projects/{projectId}/import': {
    /**
     * Add files
     * @description Prepares provided files to import.
     */
    post: operations['addFiles'];
    /**
     * Delete
     * @description Deletes prepared import data.
     */
    delete: operations['cancelImport'];
  };
  '/v2/projects/{projectId}/export': {
    /** Exports data */
    get: operations['export'];
    /** Exports data (post). Useful when providing params exceeding allowed query size. */
    post: operations['exportPost'];
  };
  '/v2/projects/{projectId}/translations/{translationId}/comments': {
    /** Returns translation comments of translation */
    get: operations['getAll_3'];
    /** Creates a translation comment */
    post: operations['create_4'];
  };
  '/v2/projects/{projectId}/translations/create-comment': {
    /** Creates a translation comment. Empty translation is stored, when not exists. */
    post: operations['create_6'];
  };
  '/v2/projects/{projectId}/suggest/translation-memory': {
    /**
     * Suggests machine translations from translation memory.
     *
     * The result is always sorted by similarity, so sorting is not supported.
     */
    post: operations['suggestTranslationMemory'];
  };
  '/v2/projects/{projectId}/suggest/machine-translations': {
    /** Suggests machine translations from enabled services */
    post: operations['suggestMachineTranslations'];
  };
  '/v2/projects/{projectId}/languages': {
    /** Returns all project languages */
    get: operations['getAll_5'];
    /** Creates language */
    post: operations['createLanguage'];
  };
  '/v2/projects/{projectId}/keys/{keyId}/screenshots': {
    /** Returns all screenshots for specified key */
    get: operations['getKeyScreenshots_1'];
    /** Upload screenshot for specific key */
    post: operations['uploadScreenshot_1'];
  };
  '/v2/pats': {
    /** Get all Personal Access Tokens */
    get: operations['getAll_7'];
    /** Creates new Personal Access Token */
    post: operations['create_8'];
  };
  '/v2/organizations': {
    /** Returns all organizations, which is current user allowed to view */
    get: operations['getAll_8'];
    /** Creates organization */
    post: operations['create_9'];
  };
  '/v2/image-upload': {
    /** Uploads an image for later use */
    post: operations['upload'];
  };
  '/v2/api-keys': {
    /** Returns user's api keys */
    get: operations['allByUser'];
    /** Creates new API key with provided scopes */
    post: operations['create_10'];
  };
  '/api/public/validate_email': {
    /** Validates if email is not in use */
    post: operations['validateEmail'];
  };
  '/api/public/sign_up': {
    /**
     * Creates new user account.
     *
     * When E-mail verification is enabled, null is returned. Otherwise JWT token is provided.
     */
    post: operations['signUp'];
  };
  '/api/public/reset_password_set': {
    /** Sets new password with password reset code from e-mail */
    post: operations['resetPasswordSet'];
  };
  '/api/public/reset_password_request': {
    /** Reset password request */
    post: operations['resetPasswordRequest'];
  };
  '/api/public/generatetoken': {
    /** Generates JWT token */
    post: operations['authenticateUser'];
  };
  '/v2/user/single-owned-organizations': {
    /** Returns all organizations owned only by current user */
    get: operations['getAllSingleOwnedOrganizations'];
  };
  '/v2/user-preferences': {
    /** Get user's preferences */
    get: operations['get'];
  };
  '/v2/slug/validate-project/{slug}': {
    /** Validate project address part */
    get: operations['validateProjectSlug'];
  };
  '/v2/slug/validate-organization/{slug}': {
    /** Validate organization address part */
    get: operations['validateOrganizationSlug'];
  };
  '/v2/public/initial-data': {
    /** @description Returns initial data always required by frontend */
    get: operations['get_1'];
  };
  '/v2/projects/{projectId}/users': {
    /** Returns project all users, who have permission to access project */
    get: operations['getAllUsers'];
  };
  '/v2/projects/{projectId}/used-namespaces': {
    /** Returns all used project namespaces. Response contains default (null) namespace if used. */
    get: operations['getUsedNamespaces'];
  };
  '/v2/projects/{projectId}/tags': {
    /** Returns project tags */
    get: operations['getAll_1'];
  };
  '/v2/projects/{projectId}/namespaces': {
    /** Returns all project namespaces */
    get: operations['getAllNamespaces'];
  };
  '/v2/projects/{projectId}/namespace-by-name/{name}': {
    /** Update namespace */
    get: operations['getByName'];
  };
  '/v2/projects/{projectId}/machine-translation-credit-balance': {
    /** Returns machine translation credit balance for specified project */
    get: operations['getProjectCredits'];
  };
  '/v2/projects/{projectId}/all-keys': {
    /** Get all keys in project */
    get: operations['getAllKeys'];
  };
  '/v2/projects/{projectId}/activity': {
    /** Returns project history */
    get: operations['getActivity'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/translations': {
    /**
     * Get translations
     * @description Returns translations prepared to import.
     */
    get: operations['getImportTranslations'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}': {
    /**
     * Get import language
     * @description Returns language prepared to import.
     */
    get: operations['getImportLanguage'];
    /**
     * Delete language
     * @description Deletes language prepared to import.
     */
    delete: operations['deleteLanguage'];
  };
  '/v2/projects/{projectId}/import/result/files/{importFileId}/issues': {
    /**
     * Get file issues
     * @description Returns issues for uploaded file.
     */
    get: operations['getImportFileIssues'];
  };
  '/v2/projects/{projectId}/import/result': {
    /**
     * Get result
     * @description Returns the result of preparation.
     */
    get: operations['getImportResult'];
  };
  '/v2/projects/{projectId}/import/all-namespaces': {
    /**
     * Get namespaces
     * @description Returns all existing and imported namespaces
     */
    get: operations['getAllNamespaces_1'];
  };
  '/v2/projects/{projectId}/translations/{translationId}/history': {
    /**
     * Returns history of specific translation.
     *
     * Sorting is not supported for supported. It is automatically sorted from newest to oldest.
     */
    get: operations['getTranslationHistory'];
  };
  '/v2/projects/{projectId}/translations/{languages}': {
    /** Returns all translations for specified languages */
    get: operations['getAllTranslations'];
  };
  '/v2/projects/{projectId}/translations/select-all': {
    /** Get select all keys */
    get: operations['getSelectAllKeyIds'];
  };
  '/v2/projects/{projectId}/transfer-options': {
    /** Returns transfer option */
    get: operations['getTransferOptions'];
  };
  '/v2/projects/{projectId}/stats/daily-activity': {
    /** Returns project daily amount of events */
    get: operations['getProjectDailyActivity'];
  };
  '/v2/projects/{projectId}/stats': {
    /** Returns project stats */
    get: operations['getProjectStats'];
  };
  '/v2/projects/{projectId}/invitations': {
    /** Returns all invitations to project */
    get: operations['getProjectInvitations'];
  };
  '/v2/projects/{projectId}/api-keys': {
    /** Returns all API keys for project */
    get: operations['allByProject'];
  };
  '/v2/projects/with-stats': {
    /** Returns all projects (including statistics) where current user has any permission */
    get: operations['getAllWithStatistics'];
  };
  '/v2/preferred-organization': {
    /** Returns preferred organization. If server allows users to create organization, preferred organization is automatically created if user doesn't have access to any organization. */
    get: operations['getPreferred'];
  };
  '/v2/pats/current': {
    /** Returns current Personal Access Token info */
    get: operations['getCurrent'];
  };
  '/v2/organizations/{slug}': {
    /** Returns organization by address part */
    get: operations['get_8'];
  };
  '/v2/organizations/{slug}/projects': {
    /** Returns all organization projects */
    get: operations['getAllProjects'];
  };
  '/v2/organizations/{slug}/projects-with-stats': {
    /** Returns all projects (including statistics) where current user has any permission */
    get: operations['getAllWithStatistics_1'];
  };
  '/v2/organizations/{organizationId}/machine-translation-credit-balance': {
    /** Returns machine translation credit balance for organization */
    get: operations['getOrganizationCredits'];
  };
  '/v2/organizations/{organizationId}/invitations': {
    /** Returns all invitations to organization */
    get: operations['getInvitations'];
  };
  '/v2/organizations/{organizationId}/usage': {
    /** @description Returns current organization usage */
    get: operations['getUsage'];
  };
  '/v2/organizations/{organizationId}/projects-with-stats': {
    /** Returns all projects (including statistics) where current user has any permission */
    get: operations['getAllWithStatistics_2'];
  };
  '/v2/organizations/{id}/users': {
    /** Returns all users in organization */
    get: operations['getAllUsers_1'];
  };
  '/v2/organizations/{id}/projects': {
    /** Returns all organization projects */
    get: operations['getAllProjects_1'];
  };
  '/v2/invitations/{code}/accept': {
    /** Accepts invitation to project or organization */
    get: operations['acceptInvitation'];
  };
  '/v2/api-keys/{keyId}': {
    /** Returns specific API key info */
    get: operations['get_10'];
  };
  '/v2/api-keys/current': {
    /** Returns current API key info */
    get: operations['getCurrent_1'];
  };
  '/v2/api-keys/availableScopes': {
    /** Returns API key scopes for every permission type */
    get: operations['getScopes'];
  };
  '/v2/administration/users': {
    /** Get all server users */
    get: operations['getUsers'];
  };
  '/v2/administration/users/{userId}/generate-token': {
    /** Get all server users */
    get: operations['generateUserToken'];
  };
  '/v2/administration/organizations': {
    /** Get all server organizations */
    get: operations['getOrganizations'];
  };
  '/api/public/verify_email/{userId}/{code}': {
    /** Sets user account as verified, when code from email is OK */
    get: operations['verifyEmail'];
  };
  '/api/public/reset_password_validate/{email}/{code}': {
    /** Validates key sent by email */
    get: operations['resetPasswordValidate'];
  };
  '/api/public/configuration': {
    /** Returns server configuration information */
    get: operations['getPublicConfiguration'];
  };
  '/api/public/authorize_oauth/{serviceType}': {
    /** Authenticates user using third party oAuth service */
    get: operations['authenticateUser_1'];
  };
  '/api/project/{projectId}/export/jsonZip': {
    /**
     * Exports data as ZIP of jsons
     * @deprecated
     */
    get: operations['doExportJsonZip'];
  };
  '/v2/projects/{projectId}/keys/{keyId}/tags/{tagId}': {
    /** Removes tag with provided id from key with provided id */
    delete: operations['removeTag'];
  };
  '/v2/projects/{projectId}/keys/{ids}': {
    /** Deletes one or multiple keys by their IDs */
    delete: operations['delete_1'];
  };
  '/v2/projects/{projectId}/keys/{keyId}/screenshots/{ids}': {
    /** Deletes multiple screenshots by ids */
    delete: operations['deleteScreenshots_1'];
  };
  '/v2/organizations/{organizationId}/users/{userId}': {
    /** Removes user from organization */
    delete: operations['removeUser'];
  };
  '/v2/invitations/{invitationId}': {
    /** Deletes invitation by ID */
    delete: operations['deleteInvitation'];
  };
  '/v2/image-upload/{ids}': {
    /** Deletes uploaded images */
    delete: operations['delete_9'];
  };
  '/v2/administration/users/{userId}': {
    /** Deletes an user */
    delete: operations['deleteUser'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserUpdateRequestDto: {
      name: string;
      email: string;
      currentPassword?: string;
      /** @description Callback url for link sent in e-mail. This may be omitted, when server has set frontEndUrl in properties. */
      callbackUrl?: string;
    };
    Avatar: {
      large: string;
      thumbnail: string;
    };
    PrivateUserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      mfaEnabled: boolean;
      avatar?: components['schemas']['Avatar'];
      /** @enum {string} */
      accountType: 'LOCAL' | 'LDAP' | 'THIRD_PARTY';
      /** @enum {string} */
      globalServerRole: 'USER' | 'ADMIN';
      deletable: boolean;
      needsSuperJwtToken: boolean;
    };
    UserUpdatePasswordRequestDto: {
      currentPassword: string;
      password: string;
    };
    JwtAuthenticationResponse: {
      accessToken?: string;
      tokenType?: string;
    };
    UserTotpEnableRequestDto: {
      totpKey: string;
      otp: string;
      password: string;
    };
    UserMfaRecoveryRequestDto: {
      password: string;
    };
    EditProjectDTO: {
      name: string;
      slug?: string;
      /** Format: int64 */
      baseLanguageId?: number;
      description?: string;
    };
    LanguageModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description Language name in english
       * @example Czech
       */
      name: string;
      /**
       * @description Language tag according to BCP 47 definition
       * @example cs-CZ
       */
      tag: string;
      /**
       * @description Language name in this language
       * @example čeština
       */
      originalName?: string;
      /**
       * @description Language flag emoji as UTF-8 emoji
       * @example 🇨🇿
       */
      flagEmoji?: string;
      /**
       * @description Whether is base language of project
       * @example false
       */
      base: boolean;
    };
    ProjectModel: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components['schemas']['Avatar'];
      organizationOwner?: components['schemas']['SimpleOrganizationModel'];
      baseLanguage?: components['schemas']['LanguageModel'];
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerName?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerSlug?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       * @enum {string}
       */
      organizationOwnerBasePermissions?:
        | 'VIEW'
        | 'TRANSLATE'
        | 'EDIT'
        | 'MANAGE';
      /** @enum {string} */
      organizationRole?: 'MEMBER' | 'OWNER';
      /**
       * @description Current user's direct permission
       * @example MANAGE
       * @enum {string}
       */
      directPermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      computedPermissions: components['schemas']['UserPermissionModel'];
    };
    SimpleOrganizationModel: {
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** @enum {string} */
      basePermissions: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      avatar?: components['schemas']['Avatar'];
    };
    UserPermissionModel: {
      /**
       * @description List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted.
       * @example [
       *   200001,
       *   200004
       * ]
       */
      permittedLanguageIds?: number[];
      /**
       * @description The type of permission.
       * @example EDIT
       * @enum {string}
       */
      type?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
    };
    UpdateNamespaceDto: {
      name: string;
    };
    NamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace
       * @example 10000048
       */
      id: number;
      /** @example homepage */
      name: string;
    };
    MachineTranslationLanguagePropsDto: {
      /**
       * Format: int64
       * @description The language to apply those rules. If null, then this settings are default.
       */
      targetLanguageId?: number;
      /**
       * @description This service will be used for automated translation
       * @enum {string}
       */
      primaryService?: 'GOOGLE' | 'AWS' | 'DEEPL' | 'AZURE';
      /** @description List of enabled services */
      enabledServices: ('GOOGLE' | 'AWS' | 'DEEPL' | 'AZURE')[];
    };
    SetMachineTranslationSettingsDto: {
      settings: components['schemas']['MachineTranslationLanguagePropsDto'][];
    };
    CollectionModelLanguageConfigItemModel: {
      _embedded?: {
        languageConfigs?: components['schemas']['LanguageConfigItemModel'][];
      };
    };
    LanguageConfigItemModel: {
      /**
       * Format: int64
       * @description When null, its a default configuration applied to not configured languages
       */
      targetLanguageId?: number;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageTag?: string;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageName?: string;
      /**
       * @description Service used for automated translating
       * @enum {string}
       */
      primaryService?: 'GOOGLE' | 'AWS' | 'DEEPL' | 'AZURE';
      /** @description Services to be used for suggesting */
      enabledServices: ('GOOGLE' | 'AWS' | 'DEEPL' | 'AZURE')[];
    };
    TagKeyDto: {
      name: string;
    };
    TagModel: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    ComplexEditKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /** @description Translations to update */
      translations?: {
        [key: string]: string | undefined;
      };
      /** @description Tags of the key. If not provided tags won't be modified */
      tags?: string[];
      /** @description IDs of screenshots to delete */
      screenshotIdsToDelete?: number[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
    };
    KeyWithDataModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
      /**
       * @description Translations object containing values updated in this request
       * @example {
       *   "en": {
       *     "id": 100000003,
       *     "text": "This is super translation!"
       *   }
       * }
       */
      translations: {
        [key: string]: components['schemas']['TranslationModel'] | undefined;
      };
      /** @description Tags of key */
      tags: components['schemas']['TagModel'][];
      /** @description Screenshots of the key */
      screenshots: components['schemas']['ScreenshotModel'][];
    };
    /** @description Screenshots of the key */
    ScreenshotModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description File name, which may be downloaded from the screenshot path.
       *
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      filename: string;
      /**
       * @description Thumbnail file name, which may be downloaded from the screenshot path.
       *
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      thumbnail: string;
      fileUrl: string;
      thumbnailUrl: string;
      /** Format: date-time */
      createdAt?: string;
    };
    /**
     * @description Translations object containing values updated in this request
     * @example {
     *   "en": {
     *     "id": 100000003,
     *     "text": "This is super translation!"
     *   }
     * }
     */
    TranslationModel: {
      /**
       * Format: int64
       * @description Id of translation record
       */
      id: number;
      /** @description Translation text */
      text?: string;
      /**
       * @description State of translation
       * @enum {string}
       */
      state: 'UNTRANSLATED' | 'TRANSLATED' | 'REVIEWED';
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * @description Which machine translation service was used to auto translate this
       * @enum {string}
       */
      mtProvider?: 'GOOGLE' | 'AWS' | 'DEEPL' | 'AZURE';
    };
    EditKeyDto: {
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
    };
    KeyModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      id: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
    };
    ProjectInviteUserDto: {
      /** @enum {string} */
      type: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      /**
       * @description IDs of languages to allow user to translate to with TRANSLATE permission.
       *
       * Only applicable when type is TRANSLATE, otherwise 400 - Bad Request is returned.
       */
      languages?: number[];
      /** @description Email to send invitation to */
      email?: string;
      /** @description Name of invited user */
      name?: string;
    };
    ProjectInvitationModel: {
      /** Format: int64 */
      id: number;
      code: string;
      /** @enum {string} */
      type: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      permittedLanguageIds?: number[];
      /** Format: date-time */
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
    };
    AutoTranslationSettingsDto: {
      /** @description If true, new keys will be automatically translated using translation memory when 100% match is found */
      usingTranslationMemory: boolean;
      /** @description If true, new keys will be automatically translated using primary machine translation service.When "usingTranslationMemory" is enabled, it tries to translate it with translation memory first. */
      usingMachineTranslation: boolean;
    };
    SetFileNamespaceRequest: {
      namespace?: string;
    };
    TranslationCommentModel: {
      /**
       * Format: int64
       * @description Id of translation comment record
       */
      id: number;
      /** @description Text of comment */
      text: string;
      /**
       * @description State of translation
       * @enum {string}
       */
      state: 'RESOLUTION_NOT_NEEDED' | 'NEEDS_RESOLUTION' | 'RESOLVED';
      author: components['schemas']['UserAccountModel'];
      /**
       * Format: date-time
       * @description Date when it was created
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Date when it was updated
       */
      updatedAt: string;
    };
    /** @description User who created the comment */
    UserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      avatar?: components['schemas']['Avatar'];
      /** @enum {string} */
      globalServerRole: 'USER' | 'ADMIN';
      deleted: boolean;
    };
    TranslationCommentDto: {
      text: string;
      /** @enum {string} */
      state: 'RESOLUTION_NOT_NEEDED' | 'NEEDS_RESOLUTION' | 'RESOLVED';
    };
    SetTranslationsWithKeyDto: {
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      key: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation
       * @example {
       *   "en": "What a translated value!",
       *   "cs": "Jaká to přeložená hodnota!"
       * }
       */
      translations: {
        [key: string]: string | undefined;
      };
      /**
       * @description List of languages to return translations for.
       *
       * If not provided, only modified translation will be provided.
       *
       * @example [
       *   "en",
       *   "de",
       *   "fr"
       * ]
       */
      languagesToReturn?: string[];
    };
    SetTranslationsResponseModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      keyId: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * @description The namespace of the key
       * @example homepage
       */
      keyNamespace?: string;
      /**
       * @description Translations object containing values updated in this request
       * @example {
       *   "en": {
       *     "id": 100000003,
       *     "text": "This is super translation!"
       *   }
       * }
       */
      translations: {
        [key: string]: components['schemas']['TranslationModel'] | undefined;
      };
    };
    LanguageDto: {
      /**
       * @description Language name in english
       * @example Czech
       */
      name: string;
      /**
       * @description Language tag according to BCP 47 definition
       * @example cs-CZ
       */
      originalName: string;
      /**
       * @description Language name in this language
       * @example čeština
       */
      tag: string;
      /**
       * @description Language flag emoji as UTF-8 emoji
       * @example 🇨🇿
       */
      flagEmoji?: string;
    };
    UpdatePatDto: {
      /** @description New description of the PAT */
      description: string;
    };
    PatModel: {
      /** Format: int64 */
      id: number;
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
      /** Format: int64 */
      lastUsedAt?: number;
    };
    RegeneratePatDto: {
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    RevealedPatModel: {
      token: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    SetOrganizationRoleDto: {
      /** @enum {string} */
      roleType: 'MEMBER' | 'OWNER';
    };
    OrganizationDto: {
      /** @example Beautiful organization */
      name: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** @example btforg */
      slug?: string;
      /** @enum {string} */
      basePermissions: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
    };
    OrganizationModel: {
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name: string;
      /** @example btforg */
      slug: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** @enum {string} */
      basePermissions: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      /**
       * @description The role of currently authorized user.
       *
       * Can be null when user has direct access to one of the projects owned by the organization.
       * @enum {string}
       */
      currentUserRole?: 'MEMBER' | 'OWNER';
      avatar?: components['schemas']['Avatar'];
    };
    OrganizationInviteUserDto: {
      /** @enum {string} */
      roleType: 'MEMBER' | 'OWNER';
      /** @description Name of invited user */
      name?: string;
      /** @description Email to send invitation to */
      email?: string;
    };
    OrganizationInvitationModel: {
      /** Format: int64 */
      id: number;
      code: string;
      /** @enum {string} */
      type: 'MEMBER' | 'OWNER';
      /** Format: date-time */
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
    };
    V2EditApiKeyDto: {
      scopes: string[];
      description?: string;
    };
    ApiKeyModel: {
      /**
       * Format: int64
       * @description ID of the API key
       */
      id: number;
      /** @description Description */
      description: string;
      /** @description Username of user owner */
      username?: string;
      /** @description Full name of user owner */
      userFullName?: string;
      /**
       * Format: int64
       * @description Api key's project ID
       */
      projectId: number;
      /** @description Api key's project name */
      projectName: string;
      /**
       * Format: int64
       * @description Timestamp of API key expiraion
       */
      expiresAt?: number;
      /**
       * Format: int64
       * @description Timestamp of API key last usage
       */
      lastUsedAt?: number;
      /**
       * @description Api key's permission scopes
       * @example [
       *   "screenshots.upload",
       *   "screenshots.delete",
       *   "translations.edit",
       *   "screenshots.view",
       *   "translations.view",
       *   "keys.edit"
       * ]
       */
      scopes: string[];
    };
    RegenerateApiKeyDto: {
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    RevealedApiKeyModel: {
      /** @description Resulting user's api key */
      key: string;
      /** Format: int64 */
      id: number;
      userFullName?: string;
      projectName: string;
      scopes: string[];
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      lastUsedAt?: number;
      username?: string;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    SuperTokenRequest: {
      /** @description Has to be provided when TOTP enabled */
      otp?: string;
      /** @description Has to be provided when TOTP not enabled */
      password?: string;
    };
    GenerateSlugDto: {
      name: string;
      oldSlug?: string;
    };
    CreateProjectDTO: {
      name: string;
      languages: components['schemas']['LanguageDto'][];
      /** @description Slug of your project used in url e.g. "/v2/projects/what-a-project". If not provided, it will be generated */
      slug?: string;
      /**
       * Format: int64
       * @description Organization to create the project in
       */
      organizationId: number;
      /** @description Tag of one of created languages, to select it as base language. If not provided, first language will be selected as base. */
      baseLanguageTag?: string;
    };
    ImportKeysDto: {
      keys: components['schemas']['ImportKeysItemDto'][];
    };
    ImportKeysItemDto: {
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation
       * @example {
       *   "en": "What a translated value!",
       *   "cs": "Jaká to přeložená hodnota!"
       * }
       */
      translations: {
        [key: string]: string | undefined;
      };
    };
    CreateKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      translations?: {
        [key: string]: string | undefined;
      };
      tags?: string[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
    };
    ErrorResponseBody: {
      code: string;
      params?: Record<string, never>[];
    };
    ImportAddFilesResultModel: {
      errors: components['schemas']['ErrorResponseBody'][];
      result?: components['schemas']['PagedModelImportLanguageModel'];
    };
    ImportLanguageModel: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int64 */
      existingLanguageId?: number;
      existingLanguageTag?: string;
      existingLanguageAbbreviation?: string;
      existingLanguageName?: string;
      importFileName: string;
      /** Format: int64 */
      importFileId: number;
      /** Format: int32 */
      importFileIssueCount: number;
      namespace?: string;
      /** Format: int32 */
      totalCount: number;
      /** Format: int32 */
      conflictCount: number;
      /** Format: int32 */
      resolvedCount: number;
    };
    PageMetadata: {
      /** Format: int64 */
      size?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int64 */
      totalPages?: number;
      /** Format: int64 */
      number?: number;
    };
    PagedModelImportLanguageModel: {
      _embedded?: {
        languages?: components['schemas']['ImportLanguageModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    ExportParams: {
      languages?: string[];
      /** @enum {string} */
      format: 'JSON' | 'XLIFF';
      structureDelimiter?: string;
      filterKeyId?: number[];
      filterKeyIdNot?: number[];
      filterTag?: string;
      filterKeyPrefix?: string;
      filterState?: ('UNTRANSLATED' | 'TRANSLATED' | 'REVIEWED')[];
      filterNamespace?: string[];
      zip: boolean;
    };
    StreamingResponseBody: Record<string, never>;
    TranslationCommentWithLangKeyDto: {
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      languageId: number;
      text: string;
      /** @enum {string} */
      state: 'RESOLUTION_NOT_NEEDED' | 'NEEDS_RESOLUTION' | 'RESOLVED';
    };
    TranslationWithCommentModel: {
      translation: components['schemas']['TranslationModel'];
      comment: components['schemas']['TranslationCommentModel'];
    };
    SuggestRequestDto: {
      /**
       * Format: int64
       * @description Key Id to get results for. Use when key is stored already.
       */
      keyId: number;
      /** Format: int64 */
      targetLanguageId: number;
      /** @description Text value of base translation. Useful, when base translation is not stored yet. */
      baseText?: string;
    };
    PagedModelTranslationMemoryItemModel: {
      _embedded?: {
        translationMemoryItems?: components['schemas']['TranslationMemoryItemModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    TranslationMemoryItemModel: {
      targetText: string;
      baseText: string;
      keyName: string;
      /** Format: float */
      similarity: number;
    };
    SuggestResultModel: {
      /**
       * @description Results provided by enabled services
       * @example {
       *   "GOOGLE": "This was translated by Google",
       *   "AWS": "This was translated by AWS",
       *   "DEEPL": "This was translated by DeepL",
       *   "AZURE": "This was translated by Azure Cognitive"
       * }
       */
      machineTranslations?: {
        [key: string]: string | undefined;
      };
      /** Format: int64 */
      translationCreditsBalanceBefore: number;
      /** Format: int64 */
      translationCreditsBalanceAfter: number;
      /**
       * Format: int64
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceBefore: number;
      /**
       * Format: int64
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceAfter: number;
    };
    CreatePatDto: {
      /** @description Description of the PAT */
      description: string;
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null, token never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    UploadedImageModel: {
      /** Format: int64 */
      id: number;
      filename: string;
      fileUrl: string;
      requestFilename: string;
      /** Format: date-time */
      createdAt: string;
    };
    CreateApiKeyDto: {
      /** Format: int64 */
      projectId: number;
      scopes: string[];
      /** @description Description of the project API key */
      description?: string;
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    TextNode: Record<string, never>;
    SignUpDto: {
      name: string;
      email: string;
      organizationName?: string;
      password: string;
      invitationCode?: string;
      callbackUrl?: string;
      recaptchaToken?: string;
    };
    ResetPassword: {
      email: string;
      code: string;
      password?: string;
    };
    ResetPasswordRequest: {
      callbackUrl: string;
      email: string;
    };
    LoginRequest: {
      username: string;
      password: string;
      otp?: string;
    };
    CollectionModelSimpleOrganizationModel: {
      _embedded?: {
        organizations?: components['schemas']['SimpleOrganizationModel'][];
      };
    };
    UserPreferencesModel: {
      language?: string;
      /** Format: int64 */
      preferredOrganizationId?: number;
    };
    AuthMethodsDTO: {
      github: components['schemas']['OAuthPublicConfigDTO'];
      google: components['schemas']['OAuthPublicConfigDTO'];
      oauth2: components['schemas']['OAuthPublicExtendsConfigDTO'];
    };
    InitialDataModel: {
      serverConfiguration: components['schemas']['PublicConfigurationDTO'];
      userInfo?: components['schemas']['PrivateUserAccountModel'];
      preferredOrganization?: components['schemas']['OrganizationModel'];
      languageTag?: string;
    };
    MtServiceDTO: {
      enabled: boolean;
      defaultEnabledForProject: boolean;
    };
    MtServicesDTO: {
      /** @enum {string} */
      defaultPrimaryService?: 'GOOGLE' | 'AWS' | 'DEEPL' | 'AZURE';
      services: {
        [key: string]: components['schemas']['MtServiceDTO'] | undefined;
      };
    };
    OAuthPublicConfigDTO: {
      clientId?: string;
      enabled: boolean;
    };
    OAuthPublicExtendsConfigDTO: {
      clientId?: string;
      authorizationUrl?: string;
      scopes?: string[];
      enabled: boolean;
    };
    PublicBillingConfigurationDTO: {
      enabled: boolean;
    };
    PublicConfigurationDTO: {
      machineTranslationServices: components['schemas']['MtServicesDTO'];
      billing: components['schemas']['PublicBillingConfigurationDTO'];
      authentication: boolean;
      authMethods?: components['schemas']['AuthMethodsDTO'];
      passwordResettable: boolean;
      allowRegistrations: boolean;
      screenshotsUrl: string;
      /** Format: int32 */
      maxUploadFileSize: number;
      clientSentryDsn?: string;
      needsEmailVerification: boolean;
      userCanCreateOrganizations: boolean;
      appName: string;
      version: string;
      showVersion: boolean;
      /** Format: int64 */
      maxTranslationTextLength: number;
      recaptchaSiteKey?: string;
      openReplayApiKey?: string;
      chatwootToken?: string;
      capterraTracker?: string;
    };
    PagedModelProjectModel: {
      _embedded?: {
        projects?: components['schemas']['ProjectModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    PagedModelUserAccountInProjectModel: {
      _embedded?: {
        users?: components['schemas']['UserAccountInProjectModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    UserAccountInProjectModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      /** @enum {string} */
      organizationRole?: 'MEMBER' | 'OWNER';
      /** @enum {string} */
      organizationBasePermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      /** @enum {string} */
      directPermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      computedPermissions: components['schemas']['UserPermissionModel'];
    };
    CollectionModelUsedNamespaceModel: {
      _embedded?: {
        namespaces?: components['schemas']['UsedNamespaceModel'][];
      };
    };
    UsedNamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace. Null for default namespace.
       * @example 10000048
       */
      id?: number;
      /**
       * @description Name of namespace. Null if default.
       * @example homepage
       */
      name?: string;
    };
    PagedModelTagModel: {
      _embedded?: {
        tags?: components['schemas']['TagModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    PagedModelNamespaceModel: {
      _embedded?: {
        namespaces?: components['schemas']['NamespaceModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    CreditBalanceModel: {
      /** Format: int64 */
      creditBalance: number;
      /** Format: int64 */
      bucketSize: number;
      /** Format: int64 */
      extraCreditBalance: number;
    };
    CollectionModelKeyModel: {
      _embedded?: {
        keys?: components['schemas']['KeyModel'][];
      };
    };
    EntityDescriptionWithRelations: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: {
        [key: string]: Record<string, never> | undefined;
      };
    };
    ExistenceEntityDescription: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: {
        [key: string]: Record<string, never> | undefined;
      };
      relations: {
        [key: string]:
          | components['schemas']['EntityDescriptionWithRelations']
          | undefined;
      };
      exists?: boolean;
    };
    ModifiedEntityModel: {
      /** Format: int64 */
      entityId: number;
      description?: {
        [key: string]: Record<string, never> | undefined;
      };
      modifications?: {
        [key: string]:
          | components['schemas']['PropertyModification']
          | undefined;
      };
      relations?: {
        [key: string]:
          | components['schemas']['ExistenceEntityDescription']
          | undefined;
      };
      exists?: boolean;
    };
    PagedModelProjectActivityModel: {
      _embedded?: {
        activities?: components['schemas']['ProjectActivityModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    ProjectActivityAuthorModel: {
      /** Format: int64 */
      id: number;
      username?: string;
      name?: string;
      avatar?: components['schemas']['Avatar'];
      deleted: boolean;
    };
    ProjectActivityModel: {
      /** Format: int64 */
      revisionId: number;
      /** Format: int64 */
      timestamp: number;
      /** @enum {string} */
      type:
        | 'UNKNOWN'
        | 'SET_TRANSLATION_STATE'
        | 'SET_TRANSLATIONS'
        | 'DISMISS_AUTO_TRANSLATED_STATE'
        | 'TRANSLATION_COMMENT_ADD'
        | 'TRANSLATION_COMMENT_DELETE'
        | 'TRANSLATION_COMMENT_EDIT'
        | 'TRANSLATION_COMMENT_SET_STATE'
        | 'SCREENSHOT_DELETE'
        | 'SCREENSHOT_ADD'
        | 'KEY_TAGS_EDIT'
        | 'KEY_NAME_EDIT'
        | 'KEY_DELETE'
        | 'CREATE_KEY'
        | 'COMPLEX_EDIT'
        | 'IMPORT'
        | 'CREATE_LANGUAGE'
        | 'EDIT_LANGUAGE'
        | 'DELETE_LANGUAGE'
        | 'CREATE_PROJECT'
        | 'EDIT_PROJECT'
        | 'NAMESPACE_EDIT';
      author?: components['schemas']['ProjectActivityAuthorModel'];
      modifiedEntities?: {
        [key: string]:
          | components['schemas']['ModifiedEntityModel'][]
          | undefined;
      };
      meta?: {
        [key: string]: Record<string, never> | undefined;
      };
      counts?: {
        [key: string]: number | undefined;
      };
    };
    PropertyModification: {
      old?: Record<string, never>;
      new?: Record<string, never>;
    };
    ImportTranslationModel: {
      /** Format: int64 */
      id: number;
      text?: string;
      keyName: string;
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      conflictId?: number;
      conflictText?: string;
      override: boolean;
      resolved: boolean;
    };
    PagedModelImportTranslationModel: {
      _embedded?: {
        translations?: components['schemas']['ImportTranslationModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    EntityModelImportFileIssueView: {
      /** Format: int64 */
      id: number;
      /** @enum {string} */
      type:
        | 'KEY_IS_NOT_STRING'
        | 'MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE'
        | 'VALUE_IS_NOT_STRING'
        | 'KEY_IS_EMPTY'
        | 'VALUE_IS_EMPTY'
        | 'PO_MSGCTXT_NOT_SUPPORTED'
        | 'ID_ATTRIBUTE_NOT_PROVIDED'
        | 'TARGET_NOT_PROVIDED'
        | 'TRANSLATION_TOO_LONG';
      params: components['schemas']['ImportFileIssueParamView'][];
    };
    ImportFileIssueParamView: {
      value?: string;
      /** @enum {string} */
      type:
        | 'KEY_NAME'
        | 'KEY_ID'
        | 'LANGUAGE_ID'
        | 'KEY_INDEX'
        | 'VALUE'
        | 'LINE'
        | 'FILE_NODE_ORIGINAL';
    };
    PagedModelEntityModelImportFileIssueView: {
      _embedded?: {
        importFileIssueViews?: components['schemas']['EntityModelImportFileIssueView'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    CollectionModelImportNamespaceModel: {
      _embedded?: {
        namespaces?: components['schemas']['ImportNamespaceModel'][];
      };
    };
    ImportNamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace. When null, namespace doesn't exist and will be created by import.
       * @example 10000048
       */
      id?: number;
      /** @example homepage */
      name: string;
    };
    PagedModelTranslationCommentModel: {
      _embedded?: {
        translationComments?: components['schemas']['TranslationCommentModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    PagedModelTranslationHistoryModel: {
      _embedded?: {
        revisions?: components['schemas']['TranslationHistoryModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    /** @description Author of the change */
    SimpleUserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      avatar?: components['schemas']['Avatar'];
      deleted: boolean;
    };
    TranslationHistoryModel: {
      /** @description Modified fields */
      modifications?: {
        [key: string]:
          | components['schemas']['PropertyModification']
          | undefined;
      };
      /**
       * Format: int64
       * @description Unix timestamp of the revision
       */
      timestamp: number;
      author?: components['schemas']['SimpleUserAccountModel'];
      /** @enum {string} */
      revisionType: 'ADD' | 'MOD' | 'DEL';
    };
    SelectAllResponse: {
      ids: number[];
    };
    KeyWithTranslationsModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      keyId: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      keyName: string;
      /**
       * Format: int64
       * @description The namespace id of the key
       * @example 100000282
       */
      keyNamespaceId?: number;
      /**
       * @description The namespace of the key
       * @example homepage
       */
      keyNamespace?: string;
      /** @description Tags of key */
      keyTags: components['schemas']['TagModel'][];
      /**
       * Format: int64
       * @description Count of screenshots provided for the key
       * @example 1
       */
      screenshotCount: number;
      /** @description Key screenshots. Not provided when API key hasn't screenshots.view scope permission. */
      screenshots?: components['schemas']['ScreenshotModel'][];
      /**
       * @description Translations object
       * @example
       *     {
       *       "en": {
       *         "id": 100000003,
       *         "text": "This is super translation!"
       *         "state": "TRANSLATED",
       *         "commentCount": 1
       *       }
       *     }
       */
      translations: {
        [key: string]:
          | components['schemas']['TranslationViewModel']
          | undefined;
      };
    };
    KeysWithTranslationsPageModel: {
      _embedded?: {
        keys?: components['schemas']['KeyWithTranslationsModel'][];
      };
      page?: components['schemas']['PageMetadata'];
      /** @description Provided languages data */
      selectedLanguages: components['schemas']['LanguageModel'][];
      /**
       * @description Cursor to get next data
       * @example eyJrZXlJZCI6eyJkaXJlY3Rpb24iOiJBU0MiLCJ2YWx1ZSI6IjEwMDAwMDAxMjAifX0=
       */
      nextCursor?: string;
    };
    /**
     * @description Translations object
     * @example
     *     {
     *       "en": {
     *         "id": 100000003,
     *         "text": "This is super translation!"
     *         "state": "TRANSLATED",
     *         "commentCount": 1
     *       }
     *     }
     */
    TranslationViewModel: {
      /**
       * Format: int64
       * @description Id of translation record
       */
      id: number;
      /** @description Translation text */
      text?: string;
      /**
       * @description State of translation
       * @enum {string}
       */
      state: 'UNTRANSLATED' | 'TRANSLATED' | 'REVIEWED';
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto: boolean;
      /**
       * @description Which machine translation service was used to auto translate this
       * @enum {string}
       */
      mtProvider?: 'GOOGLE' | 'AWS' | 'DEEPL' | 'AZURE';
      /**
       * Format: int64
       * @description Count of translation comments
       */
      commentCount: number;
      /**
       * Format: int64
       * @description Count of unresolved translation comments
       */
      unresolvedCommentCount: number;
      /** @description Was translation memory used to translate this? */
      fromTranslationMemory: boolean;
    };
    CollectionModelProjectTransferOptionModel: {
      _embedded?: {
        transferOptions?: components['schemas']['ProjectTransferOptionModel'][];
      };
    };
    ProjectTransferOptionModel: {
      name: string;
      slug: string;
      /** Format: int64 */
      id: number;
    };
    LanguageStatsModel: {
      /** Format: int64 */
      languageId?: number;
      languageTag?: string;
      languageName?: string;
      languageOriginalName?: string;
      languageFlagEmoji?: string;
      /** Format: int64 */
      translatedKeyCount: number;
      /** Format: int64 */
      translatedWordCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: int64 */
      reviewedKeyCount: number;
      /** Format: int64 */
      reviewedWordCount: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      untranslatedKeyCount: number;
      /** Format: int64 */
      untranslatedWordCount: number;
      /** Format: double */
      untranslatedPercentage: number;
    };
    ProjectStatsModel: {
      /** Format: int64 */
      projectId: number;
      /** Format: int32 */
      languageCount: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      baseWordsCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      membersCount: number;
      /** Format: int64 */
      tagCount: number;
      languageStats: components['schemas']['LanguageStatsModel'][];
    };
    PagedModelLanguageModel: {
      _embedded?: {
        languages?: components['schemas']['LanguageModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    CollectionModelProjectInvitationModel: {
      _embedded?: {
        invitations?: components['schemas']['ProjectInvitationModel'][];
      };
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PagedModelApiKeyModel: {
      _embedded?: {
        apiKeys?: components['schemas']['ApiKeyModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    PagedModelProjectWithStatsModel: {
      _embedded?: {
        projects?: components['schemas']['ProjectWithStatsModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    ProjectStatistics: {
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      languageCount: number;
      translationStatePercentages: {
        [key: string]: number | undefined;
      };
    };
    ProjectWithStatsModel: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components['schemas']['Avatar'];
      organizationOwner?: components['schemas']['SimpleOrganizationModel'];
      baseLanguage?: components['schemas']['LanguageModel'];
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerName?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerSlug?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       * @enum {string}
       */
      organizationOwnerBasePermissions?:
        | 'VIEW'
        | 'TRANSLATE'
        | 'EDIT'
        | 'MANAGE';
      /** @enum {string} */
      organizationRole?: 'MEMBER' | 'OWNER';
      /**
       * @description Current user's direct permission
       * @example MANAGE
       * @enum {string}
       */
      directPermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      computedPermissions: components['schemas']['UserPermissionModel'];
      stats: components['schemas']['ProjectStatistics'];
      languages: components['schemas']['LanguageModel'][];
    };
    CollectionModelScreenshotModel: {
      _embedded?: {
        screenshots?: components['schemas']['ScreenshotModel'][];
      };
    };
    PagedModelPatModel: {
      _embedded?: {
        pats?: components['schemas']['PatModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    PatWithUserModel: {
      user: components['schemas']['SimpleUserAccountModel'];
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      lastUsedAt?: number;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    OrganizationRequestParamsDto: {
      filterCurrentUserOwner: boolean;
      search?: string;
    };
    PagedModelOrganizationModel: {
      _embedded?: {
        organizations?: components['schemas']['OrganizationModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    CollectionModelOrganizationInvitationModel: {
      _embedded?: {
        organizationInvitations?: components['schemas']['OrganizationInvitationModel'][];
      };
    };
    UsageModel: {
      /** Format: int64 */
      organizationId: number;
      /**
       * Format: int64
       * @description Current balance of standard credits. Standard credits are refilled every month.
       */
      creditBalance: number;
      /**
       * Format: int64
       * @description How many credits are included in your current plan.
       */
      includedMtCredits: number;
      /**
       * Format: int64
       * @description Date when credits were refilled. (In epoch format.)
       */
      creditBalanceRefilledAt: number;
      /**
       * Format: int64
       * @description Date when credits will be refilled. (In epoch format.)
       */
      creditBalanceNextRefillAt: number;
      /**
       * Format: int64
       * @description Extra credits, which are neither refilled nor reset every month. These credits are used when there are no standard credits.
       */
      extraCreditBalance: number;
      /**
       * Format: int64
       * @description How many translations can be stored within your organization.
       */
      translationLimit: number;
      /**
       * Format: int64
       * @description How many translations are currently stored within your organization.
       */
      currentTranslations: number;
    };
    PagedModelUserAccountWithOrganizationRoleModel: {
      _embedded?: {
        usersInOrganization?: components['schemas']['UserAccountWithOrganizationRoleModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    UserAccountWithOrganizationRoleModel: {
      /** Format: int64 */
      id: number;
      name: string;
      username: string;
      /** @enum {string} */
      organizationRole: 'MEMBER' | 'OWNER';
    };
    ApiKeyWithLanguagesModel: {
      /**
       * @description Languages for which user has translate permission.
       *
       * If null, all languages are permitted.
       */
      permittedLanguageIds?: number[];
      /** Format: int64 */
      id: number;
      userFullName?: string;
      projectName: string;
      scopes: string[];
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      lastUsedAt?: number;
      username?: string;
      /** Format: int64 */
      expiresAt?: number;
      description: string;
    };
    PagedModelUserAccountModel: {
      _embedded?: {
        users?: components['schemas']['UserAccountModel'][];
      };
      page?: components['schemas']['PageMetadata'];
    };
    UserTotpDisableRequestDto: {
      password: string;
    };
    DeleteKeysDto: {
      /** @description IDs of keys to delete */
      ids: number[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  getInfo: {
    /** Returns current user's data. */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PrivateUserAccountModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  updateUser: {
    /** Updates current user's data. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserUpdateRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PrivateUserAccountModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  updateUserOld: {
    /**
     * Updates current user's data.
     * @deprecated
     */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserUpdateRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PrivateUserAccountModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete: {
    /** Deletes current user. */
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  updateUserPassword: {
    /** Updates current user's password. Invalidates all previous sessions upon success. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserUpdatePasswordRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  enableMfa: {
    /** Enables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
    requestBody: {
      content: {
        'application/json': components['schemas']['UserTotpEnableRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  disableMfa: {
    /** Disables TOTP-based two-factor authentication. Invalidates all previous sessions upon success. */
    requestBody: {
      content: {
        'application/json': components['schemas']['UserTotpDisableRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  regenerateRecoveryCodes: {
    /** Regenerates multi-factor authentication recovery codes */
    requestBody: {
      content: {
        'application/json': components['schemas']['UserMfaRecoveryRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string[];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  uploadAvatar: {
    /** Uploads user's avatar. */
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          avatar: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PrivateUserAccountModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  removeAvatar: {
    /** Deletes user's avatar. */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PrivateUserAccountModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setPreferredOrganization: {
    /** Set user preferred organization */
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setLanguage: {
    /** Set user's UI language */
    parameters: {
      path: {
        languageTag: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_2: {
    /** Returns project by id */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  editProject: {
    /** Modifies project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditProjectDTO'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteProject: {
    /** Deletes project by id */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setUsersPermissions: {
    /** Sets user's direct permission */
    parameters: {
      query?: {
        languages?: number[];
      };
      path: {
        projectId: number;
        userId: number;
        permissionType: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  revokePermission: {
    /** Revokes user's access */
    parameters: {
      path: {
        projectId: number;
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  update: {
    /** Update namespace */
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNamespaceDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['NamespaceModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getMachineTranslationSettings: {
    /** Returns machine translation settings for project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelLanguageConfigItemModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setMachineTranslationSettings: {
    /** Sets machine translation settings for project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetMachineTranslationSettingsDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelLanguageConfigItemModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  tagKey: {
    /** Tags a key with tag. If tag with provided name doesn't exist, it is created */
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TagKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['TagModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  complexEdit: {
    /** More */
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ComplexEditKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['KeyWithDataModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  edit: {
    /** Edits key name */
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['KeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  inviteUser: {
    /** Generates user invitation link for project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProjectInviteUserDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectInvitationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAutoTranslationSettings: {
    /** Returns auto translation settings for project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['AutoTranslationSettingsDto'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setAutoTranslationSettings: {
    /** Sets auto translation settings for project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AutoTranslationSettingsDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['AutoTranslationSettingsDto'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resolveTranslationSetOverride: {
    /**
     * Resolve conflict (override)
     * @description Resolves translation conflict. The old translation will be overridden.
     */
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting: {
    /**
     * Resolve conflict (keep existing)
     * @description Resolves translation conflict. The old translation will be kept.
     */
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resolveTranslationSetOverride_2: {
    /**
     * Resolve all translation conflicts (override)
     * @description Resolves all translation conflicts for provided language. The old translations will be overridden.
     */
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resolveTranslationSetKeepExisting_2: {
    /**
     * Resolve all translation conflicts (keep existing)
     * @description Resolves all translation conflicts for provided language. The old translations will be kept.
     */
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  selectExistingLanguage: {
    /**
     * Pair existing language
     * @description Sets existing language to pair with language to import. Data will be imported to selected existing language when applied.
     */
    parameters: {
      path: {
        importLanguageId: number;
        existingLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resetExistingLanguage: {
    /**
     * Reset existing language pairing
     * @description Resets existing language paired with language to import.
     */
    parameters: {
      path: {
        importLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  selectNamespace: {
    /**
     * Select namespace
     * @description Sets namespace for file to import.
     */
    parameters: {
      path: {
        fileId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetFileNamespaceRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  applyImport: {
    /**
     * Apply
     * @description Imports the data prepared in previous step
     */
    parameters: {
      query?: {
        forceMode?: 'OVERRIDE' | 'KEEP' | 'NO_FORCE';
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setTranslationState: {
    /** Sets translation state */
    parameters: {
      path: {
        translationId: number;
        state: 'UNTRANSLATED' | 'TRANSLATED' | 'REVIEWED';
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['TranslationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setState: {
    /** Sets state of translation comment */
    parameters: {
      path: {
        commentId: number;
        state: 'RESOLUTION_NOT_NEEDED' | 'NEEDS_RESOLUTION' | 'RESOLVED';
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['TranslationCommentModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_3: {
    /** Returns single translation comment */
    parameters: {
      path: {
        translationId: number;
        commentId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['TranslationCommentModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  update_1: {
    /** Updates single translation comment */
    parameters: {
      path: {
        commentId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TranslationCommentDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['TranslationCommentModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete_5: {
    /** Deletes the translation comment */
    parameters: {
      path: {
        commentId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  dismissAutoTranslatedState: {
    /** Removes "auto translated" indication */
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['TranslationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getTranslations: {
    /** Returns translations in project */
    parameters: {
      /** @description Cursor to get next data */
      /**
       * @description Translation state in the format: languageTag,state. You can use this parameter multiple times.
       *
       * When used with multiple states for same language it is applied with logical OR.
       *
       * When used with multiple languages, it is applied with logical AND.
       */
      /**
       * @description Languages to be contained in response.
       *
       * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
       * @example en
       */
      /** @description String to search in key name or translation text */
      /** @description Selects key with provided names. Use this param multiple times to fetch more keys. */
      /** @description Selects key with provided ID. Use this param multiple times to fetch more keys. */
      /** @description Selects only keys, where translation is missing in any language */
      /** @description Selects only keys, where translation is provided in any language */
      /**
       * @description Selects only keys, where translation is missing in specified language
       * @example en-US
       */
      /**
       * @description Selects only keys, where translation is provided in specified language
       * @example en-US
       */
      /** @description Selects only keys with screenshots */
      /** @description Selects only keys without screenshots */
      /**
       * @description Filter namespaces.
       *
       * To filter default namespace, set to empty string.
       */
      /** @description Selects only keys with provided tag */
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        cursor?: string;
        filterState?: string[];
        languages?: string[];
        search?: string;
        filterKeyName?: string[];
        filterKeyId?: number[];
        filterUntranslatedAny?: boolean;
        filterTranslatedAny?: boolean;
        filterUntranslatedInLang?: string;
        filterTranslatedInLang?: string;
        filterHasScreenshot?: boolean;
        filterHasNoScreenshot?: boolean;
        filterNamespace?: string[];
        filterTag?: string[];
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['KeysWithTranslationsPageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setTranslations: {
    /** Sets translations for existing key */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsWithKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['SetTranslationsResponseModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  createOrUpdateTranslations: {
    /** Sets translations for existing or not existing key */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsWithKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['SetTranslationsResponseModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  transferProjectToOrganization: {
    /** Transfers project's ownership to organization */
    parameters: {
      path: {
        projectId: number;
        organizationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  leaveProject: {
    /** Leave project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_5: {
    /** Returns specific language */
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  editLanguage: {
    /** Edits language */
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LanguageDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteLanguage_2: {
    /** Deletes specific language */
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  autoTranslate: {
    /**
     * Auto translates keys
     * @description Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     *
     * This will replace the the existing translation with the result obtained from specified source!
     */
    parameters: {
      /**
       * @description Tags of languages to auto-translate.
       * When no languages provided, it translates only untranslated languages.
       */
      query?: {
        languages?: string[];
        useMachineTranslation?: boolean;
        useTranslationMemory?: boolean;
      };
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  uploadAvatar_1: {
    /** Uploads organizations avatar */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          avatar: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  removeAvatar_1: {
    /** Deletes organization avatar */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_7: {
    /** Get Personal Access Token */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PatModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  update_3: {
    /** Updates Personal Access Token */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePatDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PatModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete_7: {
    /** Deletes Personal Access Token */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  regenerate: {
    /** Regenerates Personal Access Token. It generates new token value and updates its time of expiration. */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegeneratePatDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RevealedPatModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setUserRole: {
    /** Sets user role (Owner or Member) */
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetOrganizationRoleDto'];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_9: {
    /** Returns organization by ID */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  update_4: {
    /** Updates organization data */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete_8: {
    /** Deletes organization and all its projects */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  leaveOrganization: {
    /** Removes current user from organization */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  inviteUser_1: {
    /** Generates user invitation link for organization */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationInviteUserDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationInvitationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  uploadAvatar_2: {
    /** Uploads organizations avatar */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          avatar: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  removeAvatar_2: {
    /** Deletes organization avatar */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  update_5: {
    /** Edits existing API key */
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['V2EditApiKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ApiKeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete_10: {
    /** Deletes API key */
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  regenerate_1: {
    /** Regenerates API key. It generates new API key value and updates its time of expiration. */
    parameters: {
      path: {
        apiKeyId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegenerateApiKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RevealedApiKeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  setRole: {
    parameters: {
      path: {
        userId: number;
        role: 'USER' | 'ADMIN';
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getSuperToken: {
    /** Generates new JWT token permitted to sensitive operations */
    requestBody: {
      content: {
        'application/json': components['schemas']['SuperTokenRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  generateProjectSlug: {
    /** Generate project address part */
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateSlugDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  generateOrganizationSlug: {
    /** Generate organization address part */
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateSlugDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAll: {
    /** Returns all projects where current user has any permission */
    parameters?: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  createProject: {
    /** Creates project with specified languages */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProjectDTO'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  importKeys: {
    /** Import's new keys with translations. If key already exists, it's translations are not updated. */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ImportKeysDto'];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  create: {
    /** Creates new key */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateKeyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['KeyWithDataModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  create_1: {
    /** Creates new key */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateKeyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['KeyWithDataModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete_3: {
    /** Deletes one or multiple keys by their IDs in request body */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteKeysDto'];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  addFiles: {
    /**
     * Add files
     * @description Prepares provided files to import.
     */
    parameters: {
      /** @description When importing structured JSONs, you can set the delimiter which will be used in names of improted keys. */
      query?: {
        structureDelimiter?: string;
      };
      path: {
        projectId: number;
      };
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          files: string[];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ImportAddFilesResultModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  cancelImport: {
    /**
     * Delete
     * @description Deletes prepared import data.
     */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  export: {
    /** Exports data */
    parameters: {
      /**
       * @description Languages to be contained in export.
       *
       * If null, all languages are exported
       * @example en
       */
      /** @description Format to export to */
      /**
       * @description Delimiter to structure file content.
       *
       * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
       *
       * When null, resulting file won't be structured.
       */
      /** @description Filter key IDs to be contained in export */
      /** @description Filter key IDs not to be contained in export */
      /** @description Filter keys tagged by */
      /** @description Filter keys with prefix */
      /** @description Filter translations with state. By default, everything except untranslated is exported. */
      /** @description Select one ore multiple namespaces to export */
      /**
       * @description If false, it doesn't return zip of files, but it returns single file.
       *
       * This is possible only when single language is exported. Otherwise it returns "400 - Bad Request" response.
       */
      query?: {
        languages?: string[];
        format?: 'JSON' | 'XLIFF';
        structureDelimiter?: string;
        filterKeyId?: number[];
        filterKeyIdNot?: number[];
        filterTag?: string;
        filterKeyPrefix?: string;
        filterState?: ('UNTRANSLATED' | 'TRANSLATED' | 'REVIEWED')[];
        filterNamespace?: string[];
        zip?: boolean;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['StreamingResponseBody'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  exportPost: {
    /** Exports data (post). Useful when providing params exceeding allowed query size. */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExportParams'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['StreamingResponseBody'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAll_3: {
    /** Returns translation comments of translation */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelTranslationCommentModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  create_4: {
    /** Creates a translation comment */
    parameters: {
      path: {
        translationId: number;
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TranslationCommentDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['TranslationCommentModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  create_6: {
    /** Creates a translation comment. Empty translation is stored, when not exists. */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TranslationCommentWithLangKeyDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['TranslationWithCommentModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  suggestTranslationMemory: {
    /**
     * Suggests machine translations from translation memory.
     *
     * The result is always sorted by similarity, so sorting is not supported.
     */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SuggestRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelTranslationMemoryItemModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  suggestMachineTranslations: {
    /** Suggests machine translations from enabled services */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SuggestRequestDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['SuggestResultModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAll_5: {
    /** Returns all project languages */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelLanguageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  createLanguage: {
    /** Creates language */
    parameters: {
      path: {
        projectId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LanguageDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getKeyScreenshots_1: {
    /** Returns all screenshots for specified key */
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelScreenshotModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  uploadScreenshot_1: {
    /** Upload screenshot for specific key */
    parameters: {
      path: {
        keyId: number;
        projectId: number;
      };
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          screenshot: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['ScreenshotModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAll_7: {
    /** Get all Personal Access Tokens */
    parameters?: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelPatModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  create_8: {
    /** Creates new Personal Access Token */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['RevealedPatModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAll_8: {
    /** Returns all organizations, which is current user allowed to view */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query: {
        page?: number;
        size?: number;
        sort?: string[];
        params: components['schemas']['OrganizationRequestParamsDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelOrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  create_9: {
    /** Creates organization */
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  upload: {
    /** Uploads an image for later use */
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          image: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          '*/*': components['schemas']['UploadedImageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  allByUser: {
    /** Returns user's api keys */
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
        filterProjectId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelApiKeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  create_10: {
    /** Creates new API key with provided scopes */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApiKeyDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RevealedApiKeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  validateEmail: {
    /** Validates if email is not in use */
    requestBody: {
      content: {
        'application/json': components['schemas']['TextNode'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  signUp: {
    /**
     * Creates new user account.
     *
     * When E-mail verification is enabled, null is returned. Otherwise JWT token is provided.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpDto'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resetPasswordSet: {
    /** Sets new password with password reset code from e-mail */
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPassword'];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resetPasswordRequest: {
    /** Reset password request */
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPasswordRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  authenticateUser: {
    /** Generates JWT token */
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': Record<string, never>;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllSingleOwnedOrganizations: {
    /** Returns all organizations owned only by current user */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelSimpleOrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get: {
    /** Get user's preferences */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UserPreferencesModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  validateProjectSlug: {
    /** Validate project address part */
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  validateOrganizationSlug: {
    /** Validate organization address part */
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_1: {
    /** @description Returns initial data always required by frontend */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['InitialDataModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllUsers: {
    /** Returns project all users, who have permission to access project */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelUserAccountInProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getUsedNamespaces: {
    /** Returns all used project namespaces. Response contains default (null) namespace if used. */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelUsedNamespaceModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAll_1: {
    /** Returns project tags */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        search?: string;
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelTagModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllNamespaces: {
    /** Returns all project namespaces */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelNamespaceModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getByName: {
    /** Update namespace */
    parameters: {
      path: {
        name: string;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['NamespaceModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getProjectCredits: {
    /** Returns machine translation credit balance for specified project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CreditBalanceModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllKeys: {
    /** Get all keys in project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelKeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getActivity: {
    /** Returns project history */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelProjectActivityModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getImportTranslations: {
    /**
     * Get translations
     * @description Returns translations prepared to import.
     */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        onlyConflicts?: boolean;
        onlyUnresolved?: boolean;
        search?: string;
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
        languageId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelImportTranslationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getImportLanguage: {
    /**
     * Get import language
     * @description Returns language prepared to import.
     */
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ImportLanguageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteLanguage: {
    /**
     * Delete language
     * @description Deletes language prepared to import.
     */
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getImportFileIssues: {
    /**
     * Get file issues
     * @description Returns issues for uploaded file.
     */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        importFileId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelEntityModelImportFileIssueView'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getImportResult: {
    /**
     * Get result
     * @description Returns the result of preparation.
     */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelImportLanguageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllNamespaces_1: {
    /**
     * Get namespaces
     * @description Returns all existing and imported namespaces
     */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelImportNamespaceModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getTranslationHistory: {
    /**
     * Returns history of specific translation.
     *
     * Sorting is not supported for supported. It is automatically sorted from newest to oldest.
     */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
      };
      path: {
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelTranslationHistoryModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllTranslations: {
    /** Returns all translations for specified languages */
    parameters: {
      /** @description Namespace to return */
      /**
       * @description Delimiter to structure response content.
       *
       * e.g. For key "home.header.title" would result in {"home": {"header": {"title": "Hello"}}} structure.
       *
       * When null, resulting file will be a flat key-value object.
       */
      query?: {
        ns?: string;
        structureDelimiter?: string;
      };
      path: {
        languages: string[];
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getSelectAllKeyIds: {
    /** Get select all keys */
    parameters: {
      /**
       * @description Translation state in the format: languageTag,state. You can use this parameter multiple times.
       *
       * When used with multiple states for same language it is applied with logical OR.
       *
       * When used with multiple languages, it is applied with logical AND.
       */
      /**
       * @description Languages to be contained in response.
       *
       * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
       * @example en
       */
      /** @description String to search in key name or translation text */
      /** @description Selects key with provided names. Use this param multiple times to fetch more keys. */
      /** @description Selects key with provided ID. Use this param multiple times to fetch more keys. */
      /** @description Selects only keys, where translation is missing in any language */
      /** @description Selects only keys, where translation is provided in any language */
      /**
       * @description Selects only keys, where translation is missing in specified language
       * @example en-US
       */
      /**
       * @description Selects only keys, where translation is provided in specified language
       * @example en-US
       */
      /** @description Selects only keys with screenshots */
      /** @description Selects only keys without screenshots */
      /**
       * @description Filter namespaces.
       *
       * To filter default namespace, set to empty string.
       */
      /** @description Selects only keys with provided tag */
      query?: {
        filterState?: string[];
        languages?: string[];
        search?: string;
        filterKeyName?: string[];
        filterKeyId?: number[];
        filterUntranslatedAny?: boolean;
        filterTranslatedAny?: boolean;
        filterUntranslatedInLang?: string;
        filterTranslatedInLang?: string;
        filterHasScreenshot?: boolean;
        filterHasNoScreenshot?: boolean;
        filterNamespace?: string[];
        filterTag?: string[];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['SelectAllResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getTransferOptions: {
    /** Returns transfer option */
    parameters: {
      query?: {
        search?: string;
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelProjectTransferOptionModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getProjectDailyActivity: {
    /** Returns project daily amount of events */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': {
            [key: string]: number | undefined;
          };
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getProjectStats: {
    /** Returns project stats */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['ProjectStatsModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getProjectInvitations: {
    /** Returns all invitations to project */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelProjectInvitationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  allByProject: {
    /** Returns all API keys for project */
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelApiKeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllWithStatistics: {
    /** Returns all projects (including statistics) where current user has any permission */
    parameters?: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelProjectWithStatsModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPreferred: {
    /** Returns preferred organization. If server allows users to create organization, preferred organization is automatically created if user doesn't have access to any organization. */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getCurrent: {
    /** Returns current Personal Access Token info */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PatWithUserModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_8: {
    /** Returns organization by address part */
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllProjects: {
    /** Returns all organization projects */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllWithStatistics_1: {
    /** Returns all projects (including statistics) where current user has any permission */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
      path: {
        slug: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelProjectWithStatsModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getOrganizationCredits: {
    /** Returns machine translation credit balance for organization */
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CreditBalanceModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getInvitations: {
    /** Returns all invitations to organization */
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelOrganizationInvitationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getUsage: {
    /** @description Returns current organization usage */
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['UsageModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllWithStatistics_2: {
    /** Returns all projects (including statistics) where current user has any permission */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelProjectWithStatsModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllUsers_1: {
    /** Returns all users in organization */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelUserAccountWithOrganizationRoleModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getAllProjects_1: {
    /** Returns all organization projects */
    parameters: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelProjectModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  acceptInvitation: {
    /** Accepts invitation to project or organization */
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  get_10: {
    /** Returns specific API key info */
    parameters: {
      path: {
        keyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ApiKeyModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getCurrent_1: {
    /** Returns current API key info */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ApiKeyWithLanguagesModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getScopes: {
    /** Returns API key scopes for every permission type */
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getUsers: {
    /** Get all server users */
    parameters?: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelUserAccountModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  generateUserToken: {
    /** Get all server users */
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getOrganizations: {
    /** Get all server organizations */
    parameters?: {
      /** @description Zero-based page index (0..N) */
      /** @description The size of the page to be returned */
      /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
      query?: {
        page?: number;
        size?: number;
        sort?: string[];
        search?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelOrganizationModel'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  verifyEmail: {
    /** Sets user account as verified, when code from email is OK */
    parameters: {
      path: {
        userId: number;
        code: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  resetPasswordValidate: {
    /** Validates key sent by email */
    parameters: {
      path: {
        code: string;
        email: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  getPublicConfiguration: {
    /** Returns server configuration information */
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PublicConfigurationDTO'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  authenticateUser_1: {
    /** Authenticates user using third party oAuth service */
    parameters: {
      query?: {
        code?: string;
        redirect_uri?: string;
        invitationCode?: string;
      };
      path: {
        serviceType: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  doExportJsonZip: {
    /**
     * Exports data as ZIP of jsons
     * @deprecated
     */
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/zip': components['schemas']['StreamingResponseBody'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  removeTag: {
    /** Removes tag with provided id from key with provided id */
    parameters: {
      path: {
        keyId: number;
        tagId: number;
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete_1: {
    /** Deletes one or multiple keys by their IDs */
    parameters: {
      path: {
        ids: number[];
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteScreenshots_1: {
    /** Deletes multiple screenshots by ids */
    parameters: {
      path: {
        ids: number[];
        projectId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  removeUser: {
    /** Removes user from organization */
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteInvitation: {
    /** Deletes invitation by ID */
    parameters: {
      path: {
        invitationId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  delete_9: {
    /** Deletes uploaded images */
    parameters: {
      path: {
        ids: number[];
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  deleteUser: {
    /** Deletes an user */
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description Bad Request */
      400: {
        content: {
          '*/*': string;
        };
      };
      /** @description Not Found */
      404: {
        content: {
          '*/*': string;
        };
      };
    };
  };
}
