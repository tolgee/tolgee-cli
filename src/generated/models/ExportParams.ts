/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExportParams
 */
export interface ExportParams {
    /**
     * 
     * @type {Set<string>}
     * @memberof ExportParams
     */
    languages?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportParams
     */
    format: ExportParamsFormatEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ExportParams
     */
    splitByScope: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExportParams
     */
    splitByScopeDelimiter: string;
    /**
     * 
     * @type {number}
     * @memberof ExportParams
     */
    splitByScopeDepth: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ExportParams
     */
    filterKeyId?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof ExportParams
     */
    filterKeyIdNot?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ExportParams
     */
    filterTag?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportParams
     */
    filterKeyPrefix?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportParams
     */
    filterState?: Array<ExportParamsFilterStateEnum>;
    /**
     * 
     * @type {boolean}
     * @memberof ExportParams
     */
    zip: boolean;
}


/**
 * @export
 */
export const ExportParamsFormatEnum = {
    Json: 'JSON',
    Xliff: 'XLIFF'
} as const;
export type ExportParamsFormatEnum = typeof ExportParamsFormatEnum[keyof typeof ExportParamsFormatEnum];

/**
 * @export
 */
export const ExportParamsFilterStateEnum = {
    Untranslated: 'UNTRANSLATED',
    Translated: 'TRANSLATED',
    Reviewed: 'REVIEWED'
} as const;
export type ExportParamsFilterStateEnum = typeof ExportParamsFilterStateEnum[keyof typeof ExportParamsFilterStateEnum];


/**
 * Check if a given object implements the ExportParams interface.
 */
export function instanceOfExportParams(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "format" in value;
    isInstance = isInstance && "splitByScope" in value;
    isInstance = isInstance && "splitByScopeDelimiter" in value;
    isInstance = isInstance && "splitByScopeDepth" in value;
    isInstance = isInstance && "zip" in value;

    return isInstance;
}

export function ExportParamsFromJSON(json: any): ExportParams {
    return ExportParamsFromJSONTyped(json, false);
}

export function ExportParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'languages': !exists(json, 'languages') ? undefined : json['languages'],
        'format': json['format'],
        'splitByScope': json['splitByScope'],
        'splitByScopeDelimiter': json['splitByScopeDelimiter'],
        'splitByScopeDepth': json['splitByScopeDepth'],
        'filterKeyId': !exists(json, 'filterKeyId') ? undefined : json['filterKeyId'],
        'filterKeyIdNot': !exists(json, 'filterKeyIdNot') ? undefined : json['filterKeyIdNot'],
        'filterTag': !exists(json, 'filterTag') ? undefined : json['filterTag'],
        'filterKeyPrefix': !exists(json, 'filterKeyPrefix') ? undefined : json['filterKeyPrefix'],
        'filterState': !exists(json, 'filterState') ? undefined : json['filterState'],
        'zip': json['zip'],
    };
}

export function ExportParamsToJSON(value?: ExportParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'languages': value.languages,
        'format': value.format,
        'splitByScope': value.splitByScope,
        'splitByScopeDelimiter': value.splitByScopeDelimiter,
        'splitByScopeDepth': value.splitByScopeDepth,
        'filterKeyId': value.filterKeyId,
        'filterKeyIdNot': value.filterKeyIdNot,
        'filterTag': value.filterTag,
        'filterKeyPrefix': value.filterKeyPrefix,
        'filterState': value.filterState,
        'zip': value.zip,
    };
}

