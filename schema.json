{
  "type": "object",
  "properties": {
    "projectId": {
      "description": "Project ID. Only required when using a Personal Access Token.",
      "type": ["number", "string"]
    },
    "extractor": {
      "description": "A path to a custom extractor to use instead of the default one.",
      "type": "string"
    },
    "apiUrl": {
      "description": "The url of Tolgee API.",
      "type": "string"
    },
    "patterns": {
      "description": "File glob patterns to your source code, used for keys extraction.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "format": {
      "$ref": "#/$defs/format"
    },
    "push": {
      "type": "object",
      "properties": {
        "files": {
          "description": "Define, which files should be pushed and attach language/namespace to them. By default Tolgee pushes all files specified here, you can filter them by languages and namespaces properties.",
          "type": "array",
          "items": { "$ref": "#/$defs/fileMatch" }
        },
        "languages": {
          "description": "Specifies which languages should be pushed from push.files.",
          "type": "array",
          "items": { "type": "string" }
        },
        "namespaces": {
          "description": "Specifies which namespaces should be pushed from push.files.",
          "type": "array",
          "items": { "type": "string" }
        },
        "forceMode": {
          "$ref": "#/$defs/forceMode"
        },
        "overrideKeyDescriptions": {
          "description": "Override existing key descriptions from local files (only relevant for some formats).",
          "type": "boolean"
        },
        "convertPlaceholdersToIcu": {
          "description": "Convert placeholders in local files to ICU format. (Default: true)",
          "type": "boolean"
        },
        "tagNewKeys": {
          "description": "Specify tags that will be added to newly created keys.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pull": {
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to a folder where the localization files are stored. (Structure itself can be defined with `fileStructureTemplate`)",
          "type": "string"
        },
        "languages": {
          "description": "List of languages to pull. Leave unspecified to export them all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "namespaces": {
          "description": "List of namespaces to pull. Defaults to all namespaces.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "states": {
          "description": "List of translation states to include. Defaults all except untranslated.",
          "type": "array",
          "items": {
            "enum": ["UNTRANSLATED", "TRANSLATED", "REVIEWED"]
          }
        },
        "tags": {
          "description": "List of tags which to include.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludeTags": {
          "description": "List of tags which to exclude.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supportArrays": {
          "description": "Export keys with array syntax (e.g. item[0]) as arrays.",
          "type": "boolean"
        },
        "fileStructureTemplate": {
          "description": "Defines exported file structure: https://tolgee.io/tolgee-cli/push-pull-strings#file-structure-template-format",
          "type": "string"
        },
        "emptyDir": {
          "description": "Empty [path] folder before inserting pulled files.",
          "type": "boolean"
        },
        "delimiter": {
          "description": "Structure delimiter to use. By default, Tolgee interprets `.` as a nested structure. You can change the delimiter, or disable structure formatting by not specifying any value to the option.",
          "type": ["string", "null"]
        }
      }
    }
  },
  "$defs": {
    "fileMatch": {
      "type": "object",
      "properties": {
        "path": { "$ref": "#/$defs/path" },
        "language": { "type": "string" },
        "namespace": { "type": "string" }
      },
      "required": ["path", "language"]
    },
    "forceMode": {
      "description": "Specifies how to solve potential conflicts in the pushed data.\n\nOptions:\n\n  `OVERRIDE` - update everything according to local files\n  `KEEP` - create only non-existent strings, don't touch existing ones\n  `NO_FORCE` - throw an error, if there are any conflict",
      "type": "string",
      "enum": ["OVERRIDE", "KEEP", "NO_FORCE"]
    },
    "path": {
      "description": "File glob specifying which files to include.",
      "type": "string"
    },
    "format": {
      "description": "Localization files format for push and pull operations.",
      "enum": [
        "JSON_TOLGEE",
        "JSON_ICU",
        "JSON_JAVA",
        "JSON_PHP",
        "JSON_RUBY",
        "JSON_C",
        "PO_PHP",
        "PO_C",
        "PO_JAVA",
        "PO_ICU",
        "PO_RUBY",
        "APPLE_STRINGS",
        "APPLE_XLIFF",
        "PROPERTIES_ICU",
        "PROPERTIES_JAVA",
        "ANDROID_XML",
        "FLUTTER_ARB",
        "YAML_RUBY",
        "YAML_JAVA",
        "YAML_ICU",
        "YAML_PHP",
        "XLIFF_ICU",
        "XLIFF_JAVA",
        "XLIFF_PHP",
        "XLIFF_RUBY"
      ]
    }
  }
}
